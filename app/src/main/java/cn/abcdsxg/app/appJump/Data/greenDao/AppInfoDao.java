package cn.abcdsxg.app.appJump.Data.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_INFO".
*/
public class AppInfoDao extends AbstractDao<AppInfo, Long> {

    public static final String TABLENAME = "APP_INFO";

    /**
     * Properties of entity AppInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Page = new Property(1, int.class, "page", false, "page");
        public final static Property PkgName = new Property(2, String.class, "pkgName", false, "pkgName");
        public final static Property ClsName = new Property(3, String.class, "clsName", false, "clsName");
        public final static Property AppName = new Property(4, String.class, "AppName", false, "AppName");
    };


    public AppInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AppInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"page\" INTEGER NOT NULL ," + // 1: page
                "\"pkgName\" TEXT," + // 2: pkgName
                "\"clsName\" TEXT," + // 3: clsName
                "\"AppName\" TEXT);"); // 4: AppName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPage());
 
        String pkgName = entity.getPkgName();
        if (pkgName != null) {
            stmt.bindString(3, pkgName);
        }
 
        String clsName = entity.getClsName();
        if (clsName != null) {
            stmt.bindString(4, clsName);
        }
 
        String AppName = entity.getAppName();
        if (AppName != null) {
            stmt.bindString(5, AppName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPage());
 
        String pkgName = entity.getPkgName();
        if (pkgName != null) {
            stmt.bindString(3, pkgName);
        }
 
        String clsName = entity.getClsName();
        if (clsName != null) {
            stmt.bindString(4, clsName);
        }
 
        String AppName = entity.getAppName();
        if (AppName != null) {
            stmt.bindString(5, AppName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public AppInfo readEntity(Cursor cursor, int offset) {
        AppInfo entity = new AppInfo( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // page
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pkgName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // clsName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // AppName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPage(cursor.getInt(offset + 1));
        entity.setPkgName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClsName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAppName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AppInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AppInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
